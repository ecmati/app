# üìò Documentazione del Progetto CivicCoins

## üîç Panoramica

Il progetto CivicCoins √® suddiviso in due macro-componenti:

1. **Frontend Flutter** (`lib/`): app mobile (e potenzialmente web) che gestisce interfaccia utente, logica di presentazione e comunicazione con il backend.
2. **Backend Node.js** (`backend-api/`): server API REST sviluppato in JavaScript con test API condotti tramite APIary.

Le due componenti comunicano tramite richieste HTTP.

---

## üóÇÔ∏è Struttura generale del progetto

| Percorso                  | Descrizione                                                                 |
|---------------------------|-----------------------------------------------------------------------------|
| `lib/`                    | Codice sorgente Flutter.                                                    |
| `lib/config/`             | Costanti e configurazione API centralizzate.                               |
| `lib/dominio/`            | Logica di dominio e modelli dati (utenti, premi, storico, monitoraggio).   |
| `lib/presentazione/`      | Schermate, widget e gestione UI.                                           |
| `lib/servizi/`            | Servizi di comunicazione HTTP verso il backend.                            |
| `backend-api/`            | Codice backend Node.js (API REST, persistenza su file, test su APIary).    |

---

## üì¶ Dettaglio cartelle principali (Flutter)

### `lib/config/`

- `api_endpoints.dart`: definisce le URL delle API per ogni risorsa (`/auth`, `/utente`, `/cittadino`).
- `costanti.dart`: colori, icone, stringhe statiche.
- `enums.dart`: definizioni centralizzate di enum riutilizzabili.

### `lib/dominio/`

#### `gestione/`  
- `sistema_autenticazione.dart`: stato e sessione dell'utente loggato.
- `sistema_civic_coins.dart`: logica e regole per calcolare e visualizzare le Civic Coins.

#### `monitoraggio/`
- Moduli per seguire eventi come multe, bollette, spostamenti:
  - `servizio_bollette.dart`, `servizio_multe.dart`, `servizio_spostamenti.dart`, ecc.
  - `gravita_multa.dart`: enum e classificazione delle multe.
  - `servizio_esterno.dart`: estensione per provider terzi.

#### `premi/`
- Definizione dei premi e logica associata:
  - `premio.dart`, `tipo_premio.dart`, `premio_abbonamento.dart`, ecc.
  - Gestione premi legati a tasse, trasporti, negozi locali.

#### `storico/`
- Rappresenta lo storico delle attivit√† utente:
  - `bollette.dart`, `multe.dart`, `spostamenti.dart`, `storico_operazione.dart`.

#### `utenti/`
- Modelli utente:
  - `utente.dart`: base astratta.
  - `cittadino.dart`, `amministratore.dart`: ruoli specifici.

---

## üé® `lib/presentazione/`

### `gestione/`
- `theme_provider.dart`: provider per gestire il tema chiaro/scuro e memorizzazione via `SharedPreferences`.

### `schermate/`
- Schermate dell'app: login, registrazione, home, storico, profilo, premi, impostazioni.
- `impostazioni_screen.dart`: include logout e cancellazione account (chiamate ai servizi).

### `widget/`
- Componenti riutilizzabili:
  - `pulsante_home.dart`: pulsanti rapidi su home.
  - `storico_elemento.dart`: elemento grafico dello storico.
  - `dialogo_conferma.dart`: popup di conferma.

---

## üîå `lib/servizi/`

- `auth_service.dart`: login, registrazione, logout, cancellazione utente.
- `cittadino_service.dart`: inserimento, modifica e cancellazione **singola** o **completa** dei dati.
- `utente_service.dart`: operazioni sul profilo.
- `premio_service.dart`, `storico_service.dart`, `monitoraggio_service.dart`: API specifiche per ogni dominio.
- Tutti i servizi usano `api_endpoints.dart` per comporre le URL.

---

## ‚úÖ Novit√† recenti (aggiornamenti 2025)

- ‚úÖ Aggiunto endpoint e logica per il **logout** dell‚Äôutente.
- ‚úÖ Implementata la **cancellazione completa** dell‚Äôaccount (`/auth/delete_user`) + eliminazione dei dati in `data.txt`.
- ‚úÖ Aggiornata la UI `impostazioni_screen.dart` per:
  - richiamare `AuthService.logout()` e `AuthService.deleteAccount()`
  - rimuovere anche i dati con `CittadinoService.deleteData(...)` per ogni campo.
- ‚úÖ Implementata gestione tema chiaro/scuro con `Provider`.

---

## ‚ñ∂Ô∏è Flusso di autenticazione

1. Registrazione (`/auth/register`)
2. Login (`/auth/login`)
3. Salvataggio credenziali in `SistemaAutenticazione`
4. Accesso all‚Äôapp
5. Logout ‚ûú `AuthService.logout()` + pulizia cache
6. Cancellazione ‚ûú `AuthService.deleteAccount()` + `CittadinoService.deleteData(...)`

---

## üìå Conclusione

Il progetto segue un'architettura chiara e modulare:

- Separazione tra **logica di dominio** e **UI**.
- Servizi HTTP centralizzati e facilmente estendibili.
- Documentazione e costanti centralizzate.
- Supporto a tema dinamico e sessione utente persistente.

Perfetto per un'app pubblica o prototipale in ambito civico.

